

@app.route('/delete_product/<int:product_id>')
def delete_product(product_id):
    product_to_delete = Cart.query.filter_by(user_id=current_user.id, product_id=product_id).first()
    db.session.delete(product_to_delete)
    db.session.commit()

    return redirect(url_for('cart'))


@app.route('/delete_saved_product/<int:product_id>')
def delete_saved_product(product_id):
    product_to_delete = Saveforlater.query.filter_by(user_id=current_user.id, product_id=product_id).first()
    db.session.delete(product_to_delete)
    db.session.commit()

    return redirect(url_for('cart'))


@app.route('/save_for_later/<int:product_id>')
def save_for_later(product_id):
    user_id = current_user.id
    # check thru products for the product with the specified id 
    # check thru the product copy for the product copy with the id
    product = Saveforlater(user_id=user_id, product_id=product_id)
    db.session.add(product)
    db.session.commit()

    product_to_delete = Cart.query.filter_by(user_id=current_user.id, product_id=product_id).first()
    print(product_to_delete.id)
    # print(product_to_delete)
    db.session.delete(product_to_delete)
    db.session.commit()

    return redirect(url_for('cart'))

@app.route('/orders')
def orders():
    user_id = current_user.id
    orders = Orders.query.filter_by(user_id=user_id).all()
    return render_template('orders.html',orders=orders)


@app.route('/order_comment/<int:productId>/',methods=["GET", "POST"])
def order_comment(productId):
    product = Product.query.filter_by(id=productId).first()
    if request.method == "POST":
        comment = request.form["comment"]
        c = ProductRatingsAndComments.query.filter_by(userId=current_user.id,productId=productId,comments=None).first()
        if c == None:
            msg = "You have not purchased this product. Please buy to give feedback"
        else:
            c.comments = comment
            db.session.add(c)
            db.session.commit()
        return redirect(url_for('index'))
    return render_template('order_comment.html', product=product)


@app.route('/add_product_comment/<int:product_id>', methods=['POST'])
def add_comment_to_product(product_id):
    user_id = current_user.id
    if (request.form.get('ratingValue') == '') or (request.form.get('comment') == ''):
        flash("The ratings and/or comments section cannot be left blank.", 'error')
        return redirect(url_for('product', id=product_id))

    if len(request.form.get('comment')) > 500:
        flash("Your comments cannot exceed 500 characters.", 'error')
        return redirect(url_for('product', id=product_id))

    add_rating_and_comment(user_id, product_id, int(request.form['ratingValue']), request.form['comment'],
                           request.form.get('anonymous'))
    if request.form.get('anonymous') == 'on':
        flash("{} added a comment to this product".format('Anonymous'), 'success')
    else:
        flash("{} added a comment to this product".format(current_user), 'success')
    return redirect(url_for('product', id=product_id))


@app.route('/user_profile/edit_user_card/<int:id>', methods=['GET', 'POST'])
def edit_user_card(id):
    user_card = UserCard.query.filter_by(id=id).first()
    if request.method == 'POST':
        user_card.UserID = current_user.id
        user_card.CreditCardNum = request.form['CreditCardNum']
        if len(request.form['CreditCardNum']) is not 16 or not request.form['CreditCardNum'].isdigit():
            print("we are in here")
            flash('Card number must be equal to 16 and must be all numbers','error')
            return redirect(url_for('user_profile'))
        user_card.ExpMonth = request.form['ExpMonth']
        user_card.ExpYear = request.form['ExpYear']
        user_card.CVS = request.form['CVS']
        user_card.NameOnCard = request.form['NameOnCard']
        print(request.form['NameOnCard'])
        db.session.commit()
        flash('Edited Card successfully', 'success')
        return redirect(url_for('user_profile'))
    return render_template('edit_user_card.html', user_card=user_card)

@app.route('/user_profile/edit_user_shipping/<int:id>', methods=['GET', 'POST'])
def edit_user_shipping(id):
    user_shipping = UserShipping.query.filter_by(id=id).first()
    if request.method == 'POST':
        user_shipping.ShippingAddr = request.form['ShippingAddr']
        user_shipping.ShippingCity = request.form['ShippingCity']
        user_shipping.ShippingState = request.form['ShippingState']
        user_shipping.ShippingZip = request.form['ShippingZip']

        db.session.commit()
        flash('Successfully updated', 'success')
        return redirect(url_for('user_profile'))

    return render_template('edit_user_shipping.html', user_shipping=user_shipping)


@app.route('/user_profile/delete_user_card/<int:id>', methods=['GET', 'POST'])
def delete_user_card(id):
    print("card id " + str(id))
    user_card = UserCard.query.filter_by(id=id).first()
    print(user_card)
    db.session.delete(user_card)
    db.session.commit()
    flash('Successfully deleted', 'success')
    return redirect(url_for('user_profile'))


@app.route('/user_profile/delete_user_shipping/<int:id>', methods=['GET', 'POST'])
def delete_user_shipping(id):
    user_shipping = UserShipping.query.filter_by(id=id).first()
    print(user_shipping)
    db.session.delete(user_shipping)
    db.session.commit()
    flash('Successfully deleted', 'success')
    return redirect(url_for('user_profile'))

@app.route('/move_to_cart/<int:product_id>')
def move_to_cart(product_id):
    user_id = current_user.id
    # check thru products for the product with the specified id 
    # check thru the product copy for the product copy with the id
    product = Cart(user_id=user_id, product_id=product_id, quantity=1)
    db.session.add(product)
    db.session.commit()

    product_to_delete = Saveforlater.query.filter_by(user_id=current_user.id, product_id=product_id).first()
    db.session.delete(product_to_delete)
    db.session.commit()

    return redirect(url_for('cart'))
@app.route('/add_user_card', methods=['GET', 'POST'])
def add_user_card():
    if request.method == 'POST':
        user_id = current_user.id
        credit_card_num = request.form['CreditCardNum']
        if len(credit_card_num) is not 16 or not credit_card_num.isdigit():
            print("we are in here")
            flash('Card number must be equal to 16 and must be all numbers','error')
            return redirect(url_for('user_profile'))
        expMonth = request.form['ExpMonth']
        expYear = request.form['ExpYear']
        cvs = request.form['CVS']
        nameOnCard = request.form['NameOnCard']
        new_card = UserCard(UserID=user_id, CreditCardNum=credit_card_num, ExpMonth=expMonth, ExpYear=expYear, CVS=cvs,
                            NameOnCard=nameOnCard)
        db.session.add(new_card)
        db.session.commit()
        flash('new card succesfully added', 'success')
        return redirect(url_for('user_profile'))

    return render_template('add_user_card.html')

@app.route('/add_user_shipping', methods=['GET', 'POST'])
def add_user_shipping():
    if request.method == 'POST':
        UserID = current_user.id
        ShippingAddr = request.form['ShippingAddr']
        ShippingCity = request.form['ShippingCity']
        ShippingState = request.form['ShippingState']
        ShippingZip = request.form['ShippingZip']

        new_user_shipping = UserShipping(UserID=UserID, ShippingAddr=ShippingAddr, ShippingCity=ShippingCity,
                                         ShippingState=ShippingState, ShippingZip=ShippingZip)
        db.session.add(new_user_shipping)
        db.session.commit()
        flash('new shipping succesfully added', 'success')
        return redirect(url_for('user_profile'))

    return render_template('add_user_shipping.html')

@app.route('/addproduct', methods=['GET', 'POST'])
def addproduct():
    if request.method == 'POST':
        product_name = request.form['product_name']
        product_description = request.form['product_description']
        product_price = request.form['product_price']
        product = Product(title=product_name, description=product_description, price=product_price)
        db.session.add(product)
        db.session.commit()

    return render_template('addproduct.html')
@app.route('/author', methods=['GET', 'POST'])
def author_page():
    return render_template('author.html')

    # admin.add_view(ModelView(Rating, db.session))
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def server_error(e):
    return render_template('500.html'), 500

@app.route("/rate")
def rating():
    if request.method == 'POST':
        # get the rating from the form 
        # add it to the ratings table 
        #



        pass
    else:

        object = Rating.query.first()
        print(object.score)

        return render_template('ratings.html',object=object)
